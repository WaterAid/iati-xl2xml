// Given a typical setup (with 'FSharp.Formatting' referenced using NuGet),
// the following will include binaries and load the literate script
#load @"../../../packages/FSharp.Formatting.2.10.0/FSharp.Formatting.fsx"
#I "../../../packages/RazorEngine/lib/net40"
#I "../../../packages/FSharp.Formatting.2.10.0/lib/net40"
open System
open System.IO
open FSharp.Literate


// Specify more information about your project
let info =
  [ "project-name", "iati-xl2xml"
    "project-author", "Mark Townsend"
    "project-summary", "Aid project data collation and reporting for IATI"
    "project-github", "https://github.com/WaterAid/iati-xl2xml"
    "description", "Aid project data collation and reporting for IATI" ]
    
/// Processes a single F# Script file and produce HTML output
let processMarkdownAsHtml () =
  let file = @"..//test.md"
  //let template =  @"..\template.cshtml"
  let output =  @"..//output//index.html"
  // let file = @"C:\mark\excel\iati-xl2xml\docs\content\test.md"
  let template =  @"C:\mark\excel\iati-xl2xml\docs\content\tools\template.cshtml"
  // let output =  @"C:\mark\excel\iati-xl2xml\docs\output\test.html"
  // printfn "Writing %s to %s using %s" file output template
  Literate.ProcessMarkdown(file, template, output, replacements = info)


processMarkdownAsHtml()
